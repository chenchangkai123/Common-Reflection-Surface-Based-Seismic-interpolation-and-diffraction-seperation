package com.lundin.prowess.tool.fxCRS_Interp;

import java.util.ArrayList;
import java.util.Arrays;

import com.lgc.prodesk.flowbuilder.pui.pw.PWParm;
import com.lgc.prodesk.flowbuilder.pui.pw.PWProc;
import com.lgc.prodesk.seisdata.DataContext;
import com.lgc.prodesk.tbl.TableType;
import com.lgc.prowess.tool.TableParms;
import com.lgc.prodesk.flowbuilder.pui.pw.IntParm;
import com.lgc.prodesk.flowbuilder.pui.pw.FloatParm;
import com.lgc.prodesk.flowbuilder.pui.TypeDesc;
import com.lgc.prodesk.flowbuilder.pui.pw.PopChooseParm;
import com.lgc.prodesk.flowbuilder.pui.pw.ChooseParm;
import com.lgc.prodesk.flowbuilder.pui.pw.LabelParm;
import com.lgc.prowess.tool.DatasetParms;
import com.lgc.prodesk.flowbuilder.pui.Proc;
/**
 * Example5Nmo Process menu
 */
public class fxCRS_InterpProc extends PWProc {


	//Parameter: dataset
	static final String VEL_DATASET = "VELOCITY_DATASET";
	private DatasetParms _veldataParms    = new DatasetParms(this, VEL_DATASET);
	
	static final String CRS_PARAMETER_A1  = "CRS_PARAMETER_A1";
	private DatasetParms _crsA1Parms  = new DatasetParms(this, CRS_PARAMETER_A1);
	
	static final String CRS_PARAMETER_A2  = "CRS_PARAMETER_A2";
	private DatasetParms _crsA2Parms  = new DatasetParms(this, CRS_PARAMETER_A2);
	
	static final String CRS_PARAMETER_B11 = "CRS_PARAMETER_B11";
	private DatasetParms _crsB11Parms = new DatasetParms(this, CRS_PARAMETER_B11);
	
	static final String CRS_PARAMETER_B12 = "CRS_PARAMETER_B12";
	private DatasetParms _crsB12Parms = new DatasetParms(this, CRS_PARAMETER_B12);

	static final String CRS_PARAMETER_B22 = "CRS_PARAMETER_B22";
	private DatasetParms _crsB22Parms = new DatasetParms(this, CRS_PARAMETER_B22);	
	
	
	//set the output model pop-up window parameters 

	private static Object[][] _modeChoiceArray =
		{
		{"CMP gathers from CRS regularization + interpolation", 	 1},
		{"CMP gathers from CRS interpolation", 	 	 	 	 2},
		{"CRS gathers with CRS moveout corrected", 	 	 	 3},
		};
	
	// Other parameters
   	private PWParm _modeTag 		= new PopChooseParm(this, "OUTPUT_MODE_PARM", "CRS output mode", "Choose between different outputs", 1, new TypeDesc(_modeChoiceArray));

	// CRS parameter
	private PWParm _apt_inline 		= new IntParm(this, "APT_IL_PARM", "Inline Aperture", "Inline aperture for CRS interpolation", 5);
	private PWParm _apt_xline  		= new IntParm(this, "APT_XL_PARM", "Xline Aperture", "Xline aperture for CRS interpolation", 5);
	private PWParm _apt_offset_min 		= new IntParm(this, "APT_OFFSET_MIN_PARM", "Minimal offset aperture", "Minimal offset aperture for CRS interpolation", 1);
	private PWParm _apt_offset_max  	= new IntParm(this, "APT_OFFSET_MAX_PARM", "Maximal offset aperture", "Maximal offset aperture for CRS interpolation", 5);


	private final PWParm[] _menuParms;
	public fxCRS_InterpProc() {
	
	    ArrayList<PWParm> contents = new ArrayList<PWParm>();
	    
	    // add the sideway datasets selection
	    contents.add(new LabelParm());
	    contents.add(new LabelParm("Reference velocity"));
	    contents.addAll(Arrays.asList(_veldataParms.getMenuParms()));
	    
	    contents.add(new LabelParm());
	    contents.add(new LabelParm("CRS paramter: A-1"));
	    contents.addAll(Arrays.asList(_crsA1Parms.getMenuParms()));
	    
	    contents.add(new LabelParm());
	    contents.add(new LabelParm("CRS paramter: A-2"));
	    contents.addAll(Arrays.asList(_crsA2Parms.getMenuParms()));
	    
	    contents.add(new LabelParm());
	    contents.add(new LabelParm("CRS paramter: B-11"));
	    contents.addAll(Arrays.asList(_crsB11Parms.getMenuParms()));
	    
	    contents.add(new LabelParm());
	    contents.add(new LabelParm("CRS paramter: B-12"));
	    contents.addAll(Arrays.asList(_crsB12Parms.getMenuParms()));
	    
	    contents.add(new LabelParm());
	    contents.add(new LabelParm("CRS paramter: B-22"));
	    contents.addAll(Arrays.asList(_crsB22Parms.getMenuParms()));
	    
	    contents.add(new LabelParm());
	    contents.add(new LabelParm("Set CRS interpolation parameters:"));
	    
	    // add the CRS parameters
	    contents.add(_apt_inline);
	    contents.add(_apt_xline);
	    contents.add(_apt_offset_min);
	    contents.add(_apt_offset_max);
	   
	    contents.add(_modeTag);
	    
	    _menuParms = contents.toArray(new PWParm[0]);
	}

  	/**
   	* Get the menu parameters that belong to this process.
   	*/
  	@Override
  	public PWParm[] getMenuParms() {
    		return _menuParms;
  	}

  	/**
   	* Run the rules that are specific to subclasses of PWProc.
   	*/
  	@Override
  	public void runProcRules(DataContext dataContextIn) {
		_veldataParms.runProcRules();
		_crsA1Parms.runProcRules();
		_crsA2Parms.runProcRules();
		_crsB11Parms.runProcRules();
		_crsB12Parms.runProcRules();
		_crsB22Parms.runProcRules();
	}
}
